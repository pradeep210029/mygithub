class Solution
{
    public:
    pair<bool,int> checksum(Node* root)
    {
        if(root==NULL)
        {
           pair<bool,int>p=make_pair(true,0);
           return p;
        }
        if(root->left==NULL && root->right==NULL)
        {
           pair<bool,int>p=make_pair(true,root->data);
           return p;
        }
         pair<bool,int>leftans=checksum(root->left);
         pair<bool,int>rightans=checksum(root->right);
         
         bool left=leftans.first;
        bool right=rightans.first;
        bool check=(root->data)==(leftans.second+rightans.second);
         pair<bool,int>ans;
         if(left&&right&&check)
         {
             ans.first=true;
             ans.second=root->data+leftans.second+rightans.second;
         }
         else
         {
             ans.first=false;
             ans.second=0;
             
         }
        return ans;
    }
    bool isSumTree(Node* root)
    {
      return checksum(root).first;   
    }
};
